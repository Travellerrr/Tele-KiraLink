# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        with:
          gradle-version: '8.0'

      - name: Build with Gradle 8.0
        run: gradle build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./build/libs/

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  prepare_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: output

      - name: Set tag name
        id: set_tag_name
        run: echo "::set-output name=tag_name::v$(ls output/Tele-KiraLink-*.jar | grep -v 'plain' | grep -oP '(?<=KiraLink-)[^-]+' | sed 's/\.jar$//')"


      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_tag_name.outputs.tag_name }}
          release_name: Tele-KiraLink ${{ steps.set_tag_name.outputs.tag_name }}
          draft: true

      - name: Upload Release Assets
        run: |
          for file in output/*; do
            if [ -f "$file" ]; then
              asset_name=$(basename "$file")
              echo "Uploading ${asset_name}"
              GITHUB_UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}
              GITHUB_UPLOAD_URL="${GITHUB_UPLOAD_URL%\{*}"
              GITHUB_UPLOAD_URL="${GITHUB_UPLOAD_URL%\?*}"
              curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"${file}" \
              "${GITHUB_UPLOAD_URL}?name=${asset_name}&label=${asset_name}"
            else
              echo "Expected a file in output, but found something else."
            fi
          done
